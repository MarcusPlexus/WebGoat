name: Using Eureka Profile b4832f079cca (Snyk)

on:
  workflow_dispatch:

permissions:
  contents: read    # Access to the repository
  packages: write   # Access to the container registry

jobs:
  eureka-scan:
    runs-on: ubuntu-latest
    name: scan
    steps:
      - name: Checkout GitHub Action
        uses: actions/checkout@v4
    
      - name: Pull Eureka
        run: |
          echo "${{ secrets.EUREKA_PASSWORD }}" | docker login --username ${{ secrets.EUREKA_USER }} --password-stdin ${{ vars.EUREKA_REGISTRY_URL }}
          #docker login -u 741f155b-8ab5-4078-876b-8d86a6be7565 -p Xov8Q~z49eIyv-XXzbcBCF72bOlSJ3blfsh-pcCh ${{ vars.EUREKA_REGISTRY_URL }}
          docker login -u ${{ secrets.EUREKA_USER }} -p ${{ secrets.EUREKA_PASSWORD }} ${{ vars.EUREKA_REGISTRY_URL }}
          exit 1
          docker pull ${{ vars.EUREKA_REGISTRY_URL }}/${{ vars.EUREKA_REPO }}:${{ vars.EUREKA_TAG }}
          echo "Eureka image pull completed"
          docker run --rm --network host \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v "$(pwd)":/home/repo \
          -e DIND_USER_HOME="$(pwd)" \
          -e EUREKA_ENDPOINT="${{ secrets.EUREKA_ENDPOINT }}" \
          -e EUREKA_USER="${{ secrets.EUREKA_USER }}" \
          -e EUREKA_PASSWORD="${{ secrets.EUREKA_PASSWORD }}" \
          -e PROFILE_INFO="${{ vars.PROFILE_INFO_79CCA }}" \
          -e SNYK_TOKEN=$SNYK_TOKEN eureka \
          ${{ vars.EUREKA_REGISTRY_URL }}/${{ vars.EUREKA_REPO }}:${{ vars.EUREKA_TAG }}
          
      # - name: Stop if previous step failed
        # if: ${{ steps.my_step.outcome == 'failure' }}
        # run: exit 1

  build:

    runs-on: ubuntu-latest
    name: build

    steps:
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3 
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUBACTIONTOKEN }}  # Use the correct PAT

    - name: Build and push DVWA image
      run: |
        IMAGE_ID=ghcr.io/${{ github.repository_owner }}/dvwa
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
        VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
        [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
        [ "$VERSION" == "master" ] && VERSION=latest
        COMMIT=$(echo "${{ github.sha }}" | cut -c 1-7)
        echo IMAGE_ID=$IMAGE_ID
        echo VERSION=$VERSION
        echo COMMIT=$COMMIT
        docker image build --tag dvwa .
        docker image tag dvwa $IMAGE_ID:$VERSION
        docker image tag dvwa $IMAGE_ID:$COMMIT
        docker image push $IMAGE_ID:$VERSION
        docker image push $IMAGE_ID:$COMMIT
